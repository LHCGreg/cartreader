; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]
src_dir = Cart_Reader

[env:megaatmega2560]
platform = atmelavr
board = megaatmega2560
framework = arduino
lib_deps =
  https://github.com/greiman/SdFat.git#1.1.0
  https://github.com/etherkit/Si5351Arduino.git#v2.1.4
  https://github.com/joushx/Arduino-RGB-Tools.git#v1.6.0
  https://github.com/adafruit/Adafruit-GFX-Library.git#1.7.4
  https://github.com/adafruit/Adafruit_SSD1306.git#2.1.0

; Add some warnings not implied by -Wall
;
; Would like to use -Wffc++, Wold-style-cast, and -Woverloaded-virtual but platformio uses -I instead of
; -isystem for adding library headers to the include path, which results in an incredible amount
; of warnings.

src_build_flags = -Wstrict-null-sentinel
build_unflags = -fpermissive
test_ignore = test_desktop
lib_ignore =
  mockAdafruit_SSD1306
  mockAvr
  mockEEPROM
  mockSi5351Arduino
  mockSDFat
  mockWire

[env:native]
platform = native
build_type = debug
test_ignore = test_embedded
lib_deps =
  https://github.com/FabioBatSilva/ArduinoFake.git
  https://github.com/joushx/Arduino-RGB-Tools.git#v1.6.0
lib_compat_mode = off
lib_ldf_mode = chain+ ; Otherwise the LDF tries to build the Adafruit graphics library
test_build_project_src = true
build_flags = -D UNIT_TEST ; Automatically added for test builds, I think. This makes non-test builds (like when clicking the build button) mostly compile. Still fails when linking because of missing WinMain because it tries to build an executable.
src_build_flags = -Wstrict-null-sentinel
targets = envdump ; Don't build when doing a regular build, only build when testing.

; If you don't want to build button in VSCode to build both environments, only the non-unittest envirionment, create a file in the .vscode folder called tasks.json with the following content:
;
; {
;   "version": "2.0.0",
;   "tasks": [
;     {
;       "label": "Build (real)",
;       "type": "shell",
;       "command": "platformio",
;       "args": [
;         "run",
;         "-e",
;         "megaatmega2560"
;       ],
;       "options": {
;         "env": { "PATH": "C:\\Users\\greg\\.platformio\\penv\\Scripts" }
;       }
;     }
;   ]
; }
;
; if the platformio executable is on your PATH, you don't need the options block. If it's not, edit the path in the example above
; to where it is on your system.
;
; Then in edit .vscode/settings.json, so it has
; {
;   "platformio-ide.buildTask": "Build (real)"
; }"
